{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":84175,"databundleVersionId":9816926,"sourceType":"competition"}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-14T00:44:08.004129Z","iopub.execute_input":"2024-10-14T00:44:08.005060Z","iopub.status.idle":"2024-10-14T00:44:08.011847Z","shell.execute_reply.started":"2024-10-14T00:44:08.005020Z","shell.execute_reply":"2024-10-14T00:44:08.010846Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/nfl-big-data-bowl-2025/players.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_7.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_9.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_6.csv\n/kaggle/input/nfl-big-data-bowl-2025/games.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_8.csv\n/kaggle/input/nfl-big-data-bowl-2025/player_play.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_4.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_3.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_5.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_1.csv\n/kaggle/input/nfl-big-data-bowl-2025/plays.csv\n/kaggle/input/nfl-big-data-bowl-2025/tracking_week_2.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 0. Import Libraries","metadata":{}},{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport os\nimport glob\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-10-14T00:44:10.195757Z","iopub.execute_input":"2024-10-14T00:44:10.196660Z","iopub.status.idle":"2024-10-14T00:44:10.201966Z","shell.execute_reply.started":"2024-10-14T00:44:10.196617Z","shell.execute_reply":"2024-10-14T00:44:10.201016Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Check GPU availability\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n\n# Enable device placement logging\ntf.debugging.set_log_device_placement(True)","metadata":{"execution":{"iopub.status.busy":"2024-10-14T00:44:10.980886Z","iopub.execute_input":"2024-10-14T00:44:10.981577Z","iopub.status.idle":"2024-10-14T00:44:11.195174Z","shell.execute_reply.started":"2024-10-14T00:44:10.981538Z","shell.execute_reply":"2024-10-14T00:44:11.194188Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Num GPUs Available:  2\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 1. Data Preparation <a name=\"data-preparation\"></a>\n## 1.1 Loading Data\nFirst, we need to load the necessary data files:\n\n- Tracking data (`tracking_week_1.csv` to `tracking_week_9.csv`)\n- Play data (`plays.csv`)\n- Player data (`players.csv`)","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nimport glob\n\n# Load plays data\nplays = pd.read_csv('/kaggle/input/nfl-big-data-bowl-2025/plays.csv')\n\n# Load players data\nplayers = pd.read_csv('/kaggle/input/nfl-big-data-bowl-2025/players.csv')\n\n# Load tracking data for weeks 1 to 9\ntracking_files = sorted(glob.glob('/kaggle/input/nfl-big-data-bowl-2025/tracking_week_*.csv'))\ntracking_data = pd.concat((pd.read_csv(f) for f in tracking_files), ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-10-14T00:44:12.717864Z","iopub.execute_input":"2024-10-14T00:44:12.718247Z","iopub.status.idle":"2024-10-14T00:48:01.011367Z","shell.execute_reply.started":"2024-10-14T00:44:12.718200Z","shell.execute_reply":"2024-10-14T00:48:01.010521Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## 1.2 Merging Data\nMerge the tracking data with play and player information:","metadata":{}},{"cell_type":"code","source":"# Merge tracking data with plays data\ndata = tracking_data.merge(plays, on=['gameId', 'playId'], how='inner')\n\n# Merge with player positions\ndata = data.merge(players[['nflId', 'position']], on='nflId', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-10-14T00:48:01.013187Z","iopub.execute_input":"2024-10-14T00:48:01.013840Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.3 Extracting Pre-Snap Positions\nWe'll focus on pre-snap frames where `frameType` is `'BEFORE_SNAP'`.","metadata":{}},{"cell_type":"code","source":"# Filter pre-snap data\npre_snap_data = data[data['frameType'] == 'BEFORE_SNAP']\n\n# Ensure that we have the necessary columns\npre_snap_data = pre_snap_data[['gameId', 'playId', 'nflId', 'x', 'y', 'team', 'position', 'playType']]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4 Creating Images from Positions\nWe need to convert player positions into a grid or image representation that can be fed into a CNN.\n\nGrid Parameters\n- Field Dimensions: The football field is 120 yards long (including end zones) and 53.3 yards wide.\n- Grid Size: We'll define a grid size, say width = 53 and length = 120, to discretize the field.\n\nProcess\n1. Normalize Positions: Adjust positions to fit within the grid.\n2. Create a 2D Array: For each play, create a 2D array where each cell represents a grid square on the field.\n3. Assign Values to Grid Cells: Mark the positions of players on the grid.\n\nHere's how we can do it:\n\n","metadata":{}},{"cell_type":"code","source":"def create_play_image(play_data, grid_size=(53, 120)):\n    width, length = grid_size\n    image = np.zeros((width, length, 3), dtype=np.uint8)  # 3 channels for RGB\n\n    # Offensive players\n    offense = play_data[play_data['team'] == play_data['possessionTeam'].iloc[0]]\n    # Defensive players\n    defense = play_data[play_data['team'] == play_data['defensiveTeam'].iloc[0]]\n    # Football\n    football = play_data[play_data['team'] == 'football']\n\n    # Function to plot players on the image\n    def plot_players(players, color):\n        for _, player in players.iterrows():\n            x = int(player['x'])\n            y = int(player['y'])\n            if 0 <= x < length and 0 <= y < width:\n                image[width - int(y) - 1, int(x) - 1] = color  # Adjust for image coordinates\n\n    # Plot offensive players in red\n    plot_players(offense, [255, 0, 0])\n    # Plot defensive players in blue\n    plot_players(defense, [0, 0, 255])\n    # Plot football in green\n    plot_players(football, [0, 255, 0])\n\n    return image","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Note: We need to handle coordinate adjustments carefully since image coordinates start from the top-left corner.","metadata":{}},{"cell_type":"markdown","source":"Generating Images for All Plays:","metadata":{}},{"cell_type":"code","source":"from tqdm import tqdm\nimport cv2\n\nplay_images = []\nlabels = []\n\ngrouped = pre_snap_data.groupby(['gameId', 'playId'])\nfor (gameId, playId), play in tqdm(grouped, total=len(grouped)):\n    play_type = play['playType'].iloc[0]\n    if play_type not in ['RUN', 'PASS']:\n        continue  # Skip plays that are not run or pass\n\n    image = create_play_image(play)\n    play_images.append(image)\n    labels.append(0 if play_type == 'RUN' else 1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2. Building the CNN Model \n## 2.1 Defining the Model Architecture\nWe'll use a simple CNN architecture suitable for image classification.","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n\ninput_shape = (53, 120, 3)  # Height, Width, Channels\n\nmodel = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.5),\n    Dense(1, activation='sigmoid')  # Binary classification\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 2.2 Preparing Data for Training\nConvert the lists of images and labels into NumPy arrays and split into training and validation sets.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split\n\nX = np.array(play_images)\ny = np.array(labels)\n\n# Normalize pixel values\nX = X / 255.0\n\n# Split data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3. Training and Evaluation \n## 3.1 Training the CNN","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True\n)\n\n# Fit the data generator\ndatagen.fit(X_train)\n\n# Use the generator in model training\nhistory = model.fit(\n    datagen.flow(X_train, y_train, batch_size=32),\n    epochs=10,\n    validation_data=(X_val, y_val)\n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.2 Evaluating Model Performance\nPlot training and validation accuracy and loss.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Accuracy plot\nplt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Train Acc')\nplt.plot(history.history['val_accuracy'], label='Val Acc')\nplt.legend()\nplt.title('Accuracy')\n\n# Loss plot\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Val Loss')\nplt.legend()\nplt.title('Loss')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4. Integrating Predictions into Visualization\n## 4.1 Modifying the Animation Code\nIn your animation loop, integrate the model's prediction for each play and display it under the animation.","metadata":{}},{"cell_type":"code","source":"for i, t in enumerate(times):\n    if i % frame_skip != 0:\n        continue\n\n    datai = data[data['time'] == t].reset_index(drop=True)\n    gameId = datai.loc[0, 'gameId']\n    playId = datai.loc[0, 'playId']\n\n    # Get pre-snap data for this play\n    play_data = pre_snap_data[(pre_snap_data['gameId'] == gameId) & (pre_snap_data['playId'] == playId)]\n    if play_data.empty:\n        predicted_play = 'Unknown'\n    else:\n        image = create_play_image(play_data)\n        image = image / 255.0  # Normalize\n        image = np.expand_dims(image, axis=0)  # Add batch dimension\n\n        # Ensure the model uses the GPU for prediction\n        with tf.device('/GPU:0'):\n            prediction = model.predict(image)[0][0]\n        predicted_play = 'RUN' if prediction < 0.5 else 'PASS'\n\n    # Proceed with plotting as before\n    fig, ax = plt.subplots(figsize=(20, 10), facecolor='#3CB371')\n\n    draw_football_field(ax)\n\n    # Plot players \n    for team in team_colors.keys():\n        team_data = datai[datai['club'] == team]\n        if team_data.empty:\n            continue\n        primary_color, secondary_color = get_color_pair(team)\n\n        # Define marker properties\n        if team == 'football':\n            marker = 's'  # Square marker for football\n            size = 300    # Larger size\n            edge_width = 2\n        else:\n            marker = 'o'  # Circle marker for players\n            size = 100    # Standard size\n            edge_width = 1\n\n        # Plot scatter with facecolor and edgecolor\n        sc = ax.scatter(\n            team_data['x'],\n            team_data['y'],\n            c=team_data['club'].apply(lambda x: primary_color),\n            edgecolors=team_data['club'].apply(lambda x: secondary_color),\n            linewidth=edge_width,\n            s=size,\n            marker=marker,\n            zorder=5\n        )\n\n        # Add player jersey numbers\n        for _, row in team_data.iterrows():\n            if pd.notnull(row['displayName']) and pd.notnull(row['jerseyNumber']):\n                ax.text(\n                    row['x'] + 0.3,\n                    row['y'] + 0.3,\n                    int(row['jerseyNumber']),\n                    fontsize=6,  # Reduced fontsize\n                    color='black',\n                    ha='center'\n                )\n\n    # Add text annotations\n    ax.text(60, -5, f'Predicted Offensive Play: {predicted_play}', fontsize=14, ha='center')\n\n    # Save frame\n    plt.savefig(f'frames/frame_{i:06d}.png', dpi=save_dpi, facecolor=fig.get_facecolor())\n    plt.close(fig)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}